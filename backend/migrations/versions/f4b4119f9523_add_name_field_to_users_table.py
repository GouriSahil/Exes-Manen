"""Add name field to users table

Revision ID: f4b4119f9523
Revises: 59535b117b98
Create Date: 2025-10-04 13:15:52.748018

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = 'f4b4119f9523'
down_revision = '59535b117b98'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('approval_flows', schema=None) as batch_op:
        batch_op.add_column(sa.Column('created_at', sa.DateTime(), nullable=True))
        batch_op.alter_column('approver_role',
               existing_type=postgresql.ENUM('manager', 'finance', 'director', 'cfo', name='approverroleenum'),
               type_=sa.String(),
               existing_nullable=False)
        batch_op.alter_column('is_mandatory',
               existing_type=sa.BOOLEAN(),
               nullable=False)

    with op.batch_alter_table('approval_rules', schema=None) as batch_op:
        batch_op.alter_column('rule_type',
               existing_type=postgresql.ENUM('percentage', 'specific', 'hybrid', name='ruletypeenum'),
               type_=sa.String(),
               existing_nullable=False)

    with op.batch_alter_table('approvals', schema=None) as batch_op:
        batch_op.add_column(sa.Column('created_at', sa.DateTime(), nullable=True))
        batch_op.alter_column('status',
               existing_type=postgresql.ENUM('pending', 'approved', 'rejected', name='approvalstatusenum'),
               type_=sa.String(),
               nullable=False)

    with op.batch_alter_table('departments', schema=None) as batch_op:
        batch_op.add_column(sa.Column('manager_id', sa.UUID(), nullable=True))
        batch_op.create_foreign_key(None, 'users', ['manager_id'], ['id'])

    with op.batch_alter_table('employees', schema=None) as batch_op:
        batch_op.add_column(sa.Column('employee_id', sa.String(), nullable=True))
        batch_op.add_column(sa.Column('hire_date', sa.Date(), nullable=True))
        batch_op.add_column(sa.Column('salary', sa.Numeric(), nullable=True))
        batch_op.add_column(sa.Column('is_active', sa.Boolean(), nullable=False))

    with op.batch_alter_table('expenses', schema=None) as batch_op:
        batch_op.alter_column('status',
               existing_type=postgresql.ENUM('pending', 'approved', 'rejected', name='expensestatusenum'),
               type_=sa.String(),
               nullable=False)
        batch_op.drop_column('vendor')
        batch_op.drop_column('paid_by')
        batch_op.drop_column('remarks')
        batch_op.drop_column('updated_at')

    with op.batch_alter_table('role_permissions', schema=None) as batch_op:
        batch_op.add_column(sa.Column('created_at', sa.DateTime(), nullable=True))
        batch_op.drop_column('granted_at')

    with op.batch_alter_table('roles', schema=None) as batch_op:
        batch_op.add_column(sa.Column('is_active', sa.Boolean(), nullable=False))
        batch_op.drop_column('permissions')
        batch_op.drop_column('is_custom')

    with op.batch_alter_table('team_members', schema=None) as batch_op:
        batch_op.add_column(sa.Column('role', sa.String(), nullable=True))
        batch_op.add_column(sa.Column('is_active', sa.Boolean(), nullable=False))
        batch_op.add_column(sa.Column('created_at', sa.DateTime(), nullable=True))

    with op.batch_alter_table('teams', schema=None) as batch_op:
        batch_op.add_column(sa.Column('team_lead_id', sa.UUID(), nullable=True))
        batch_op.drop_constraint(batch_op.f('teams_department_id_fkey'), type_='foreignkey')
        batch_op.drop_constraint(batch_op.f('teams_team_leader_id_fkey'), type_='foreignkey')
        batch_op.create_foreign_key(None, 'users', ['team_lead_id'], ['id'])
        batch_op.drop_column('department_id')
        batch_op.drop_column('team_leader_id')

    with op.batch_alter_table('user_roles', schema=None) as batch_op:
        batch_op.add_column(sa.Column('assigned_by', sa.UUID(), nullable=True))
        batch_op.add_column(sa.Column('is_active', sa.Boolean(), nullable=False))
        batch_op.add_column(sa.Column('created_at', sa.DateTime(), nullable=True))
        batch_op.create_foreign_key(None, 'users', ['assigned_by'], ['id'])

    with op.batch_alter_table('users', schema=None) as batch_op:
        batch_op.add_column(sa.Column('name', sa.String(), nullable=False))
        batch_op.add_column(sa.Column('password_hash', sa.String(), nullable=True))
        batch_op.add_column(sa.Column('is_active', sa.Boolean(), nullable=False))
        batch_op.add_column(sa.Column('last_login', sa.DateTime(), nullable=True))
        batch_op.drop_column('first_name')
        batch_op.drop_column('updated_at')
        batch_op.drop_column('temporary_password')
        batch_op.drop_column('last_name')
        batch_op.drop_column('role')
        batch_op.drop_column('password')
        batch_op.drop_column('status')

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('users', schema=None) as batch_op:
        batch_op.add_column(sa.Column('status', postgresql.ENUM('active', 'inactive', name='userstatusenum'), server_default=sa.text("'active'::userstatusenum"), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('password', sa.VARCHAR(), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('role', postgresql.ENUM('admin', 'manager', 'employee', name='userroleenum'), autoincrement=False, nullable=False))
        batch_op.add_column(sa.Column('last_name', sa.VARCHAR(), autoincrement=False, nullable=False))
        batch_op.add_column(sa.Column('temporary_password', sa.VARCHAR(), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('first_name', sa.VARCHAR(), autoincrement=False, nullable=False))
        batch_op.drop_column('last_login')
        batch_op.drop_column('is_active')
        batch_op.drop_column('password_hash')
        batch_op.drop_column('name')

    with op.batch_alter_table('user_roles', schema=None) as batch_op:
        batch_op.drop_constraint(None, type_='foreignkey')
        batch_op.drop_column('created_at')
        batch_op.drop_column('is_active')
        batch_op.drop_column('assigned_by')

    with op.batch_alter_table('teams', schema=None) as batch_op:
        batch_op.add_column(sa.Column('team_leader_id', sa.UUID(), autoincrement=False, nullable=False))
        batch_op.add_column(sa.Column('department_id', sa.UUID(), autoincrement=False, nullable=False))
        batch_op.drop_constraint(None, type_='foreignkey')
        batch_op.create_foreign_key(batch_op.f('teams_team_leader_id_fkey'), 'users', ['team_leader_id'], ['id'])
        batch_op.create_foreign_key(batch_op.f('teams_department_id_fkey'), 'departments', ['department_id'], ['id'])
        batch_op.drop_column('team_lead_id')

    with op.batch_alter_table('team_members', schema=None) as batch_op:
        batch_op.drop_column('created_at')
        batch_op.drop_column('is_active')
        batch_op.drop_column('role')

    with op.batch_alter_table('roles', schema=None) as batch_op:
        batch_op.add_column(sa.Column('is_custom', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('permissions', postgresql.ARRAY(sa.TEXT()), autoincrement=False, nullable=True))
        batch_op.drop_column('is_active')

    with op.batch_alter_table('role_permissions', schema=None) as batch_op:
        batch_op.add_column(sa.Column('granted_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True))
        batch_op.drop_column('created_at')

    with op.batch_alter_table('expenses', schema=None) as batch_op:
        batch_op.add_column(sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('remarks', sa.TEXT(), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('paid_by', sa.VARCHAR(), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('vendor', sa.VARCHAR(), autoincrement=False, nullable=True))
        batch_op.alter_column('status',
               existing_type=sa.String(),
               type_=postgresql.ENUM('pending', 'approved', 'rejected', name='expensestatusenum'),
               nullable=True)

    with op.batch_alter_table('employees', schema=None) as batch_op:
        batch_op.drop_column('is_active')
        batch_op.drop_column('salary')
        batch_op.drop_column('hire_date')
        batch_op.drop_column('employee_id')

    with op.batch_alter_table('departments', schema=None) as batch_op:
        batch_op.drop_constraint(None, type_='foreignkey')
        batch_op.drop_column('manager_id')

    with op.batch_alter_table('approvals', schema=None) as batch_op:
        batch_op.alter_column('status',
               existing_type=sa.String(),
               type_=postgresql.ENUM('pending', 'approved', 'rejected', name='approvalstatusenum'),
               nullable=True)
        batch_op.drop_column('created_at')

    with op.batch_alter_table('approval_rules', schema=None) as batch_op:
        batch_op.alter_column('rule_type',
               existing_type=sa.String(),
               type_=postgresql.ENUM('percentage', 'specific', 'hybrid', name='ruletypeenum'),
               existing_nullable=False)

    with op.batch_alter_table('approval_flows', schema=None) as batch_op:
        batch_op.alter_column('is_mandatory',
               existing_type=sa.BOOLEAN(),
               nullable=True)
        batch_op.alter_column('approver_role',
               existing_type=sa.String(),
               type_=postgresql.ENUM('manager', 'finance', 'director', 'cfo', name='approverroleenum'),
               existing_nullable=False)
        batch_op.drop_column('created_at')

    # ### end Alembic commands ###
